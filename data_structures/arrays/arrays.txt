Arrays en C: Conceptos Fundamentales
¿Qué es un Array?
Un array (o arreglo) en C es una colección de elementos del mismo tipo almacenados en ubicaciones de memoria contiguas. Los arrays permiten almacenar y acceder a múltiples valores utilizando un solo nombre y un índice para cada elemento.

¿Para qué sirven los Arrays?
Los arrays son útiles para:

Almacenar una lista de valores relacionados, como números o caracteres.
Acceder rápidamente a los elementos mediante índices.
Iterar sobre una colección de elementos usando bucles.
Implementar estructuras de datos más complejas como matrices y tablas.


Declaración y Definición de un Array
Para declarar un array en C, se especifica el tipo de datos, el nombre del array y el tamaño entre corchetes. Por ejemplo:

int numeros[5]; // Declara un array de 5 enteros
Aquí, numeros es un array de 5 enteros.

Inicialización de un Array
Un array puede ser inicializado en el momento de su declaración:

int numeros[5] = {1, 2, 3, 4, 5}; // Inicializa el array con 5 enteros
Si no se especifican todos los valores, los elementos restantes se inicializan a cero por defecto:

int numeros[5] = {1, 2}; // numeros[0] = 1, numeros[1] = 2, numeros[2] a numeros[4] = 0

Acceso a Elementos del Array
Los elementos del array se acceden usando índices, que comienzan en 0:

int valor = numeros[0]; // Accede al primer elemento
numeros[2] = 10; // Asigna 10 al tercer elemento
Almacenamiento en Memoria
Los elementos del array se almacenan en ubicaciones de memoria contiguas. Esto significa que si numeros es un array de enteros y un entero ocupa 4 bytes, el primer elemento numeros[0] estará en la dirección de memoria x, numeros[1] estará en x + 4, numeros[2] en x + 8, y así sucesivamente.

Arrays Multidimensionales
C también soporta arrays multidimensionales, como matrices. Por ejemplo, un array bidimensional (matriz) de enteros se declara así:

int matriz[3][4]; // Declara una matriz de 3 filas y 4 columnas
Inicialización de Arrays Multidimensionales

int matriz[3][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12}
};
Pasando Arrays a Funciones
En C, puedes pasar arrays a funciones. Dado que el nombre del array actúa como un puntero a su primer elemento, puedes pasar el array como un argumento de la función:

void imprimirArray(int arr[], int tamano) {
    for (int i = 0; i < tamano; i++) {
        printf("%d ", arr[i]);
    }
}
Llamada a la función:

int numeros[5] = {1, 2, 3, 4, 5};
imprimirArray(numeros, 5);
Consideraciones Importantes
Índices Fuera de Rango: Acceder a un índice fuera del rango definido del array resulta en comportamiento indefinido y puede causar errores de ejecución.
Tamaño del Array: El tamaño del array debe ser una constante conocida en tiempo de compilación si se declara estáticamente. Para tamaños dinámicos, puedes usar memoria dinámica (malloc).
Memoria Dinámica: Para arrays cuyo tamaño no se conoce en tiempo de compilación, puedes usar malloc para reservar memoria en tiempo de ejecución.

int *arr = (int *)malloc(5 * sizeof(int)); // Reserva un array de 5 enteros
if (arr == NULL) {
    // Manejo del error de memoria
}


Arrays vs. Linked Lists

Arrays
Acceso Directo: Los arrays permiten acceso directo a cualquier elemento en O(1) tiempo.
Memoria Contigua: Requieren memoria contigua, lo que puede ser una limitación para grandes arrays.
Costo de Inserción/Eliminación: Insertar o eliminar elementos en medio de un array puede ser costoso (O(n)).

Linked Lists
Flexibilidad de Memoria: No requieren memoria contigua. Cada nodo se almacena por separado y contiene un puntero al siguiente nodo.
Costo de Acceso: Acceder a un elemento en una lista enlazada requiere O(n) tiempo en el peor caso.
Inserción/Eliminación: Permiten inserciones y eliminaciones eficientes (O(1) si se conoce el nodo anterior).

Resumen
Arrays: Útiles para acceso rápido a elementos mediante índices y para almacenar datos en memoria contigua.
Memoria Contigua: Esencial para entender cómo los datos se almacenan y acceden rápidamente.
Multidimensionalidad: Permite manejar estructuras de datos más complejas como matrices.
Funciones: Pasar arrays a funciones permite modularidad y reutilización del código.
Dominar los arrays te preparará para entender mejor las listas enlazadas, donde la gestión de memoria y los punteros juegan un papel crucial.


Asi se almacena un array de enteros (int) en memoria:


int numeros[5] = {10, 20, 30, 40, 50};

Memoria:
Dirección   Valor
0x100       10
0x104       20
0x108       30
0x10C       40
0x110       50

+-----------+-----------+-----------+-----------+-----------+
| 0x100     | 0x104     | 0x108     | 0x10C     | 0x110     |
|   10      |   20      |   30      |   40      |   50      |
+-----------+-----------+-----------+-----------+-----------+


Asi se almacena un array de caracteres (char) en memoria:

char letras[6] = "hello";

Memoria:
Dirección   Valor
0x200       'h'
0x201       'e'
0x202       'l'
0x203       'l'
0x204       'o'
0x205       '\0'

+-----------+-----------+-----------+-----------+-----------+-----------+
| 0x200     | 0x201     | 0x202     | 0x203     | 0x204     | 0x205     |
|   'h'     |   'e'     |   'l'     |   'l'     |   'o'     |   '\0'    |
+-----------+-----------+-----------+-----------+-----------+-----------+
