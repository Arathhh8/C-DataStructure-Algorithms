Linked Lists en C: Conceptos Fundamentales
¿Qué es una Linked List?
Una linked list (lista enlazada) es una estructura de datos lineal compuesta por una secuencia de nodos. Cada nodo contiene dos partes:

Dato: El valor o los valores almacenados en el nodo.
Puntero: Una referencia (puntero) al siguiente nodo en la secuencia.


Tipos de Linked Lists
Singly Linked List: Cada nodo apunta al siguiente nodo. No hay punteros al nodo anterior.
Doubly Linked List: Cada nodo apunta al siguiente nodo y al nodo anterior.
Circular Linked List: El último nodo apunta de vuelta al primer nodo, formando un ciclo.

Definición de una Linked List en C
Estructura del Nodo
Primero, definimos la estructura del nodo para una singly linked list:

typedef struct ListNode {
    int val;
    struct ListNode* next;
} ListNode;
Aquí, ListNode es una estructura que contiene:

int val: El valor almacenado en el nodo.
struct ListNode* next: Un puntero al siguiente nodo en la lista.

Creación de Nodos y Construcción de la Lista
Función para Crear un Nodo
Una función para crear un nuevo nodo:

ListNode* createNode(int value) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    if (newNode == NULL) {
        printf("Error al reservar memoria\n");
        return NULL;
    }
    newNode->val = value;
    newNode->next = NULL;
    return newNode;
}
Construcción de una Lista
Aquí tienes un ejemplo de cómo construir una lista enlazada simple con tres nodos:

#include <stdio.h>
#include <stdlib.h>

// Definición de la estructura ListNode
typedef struct ListNode {
    int val;
    struct ListNode* next;
} ListNode;

// Función para crear un nuevo nodo
ListNode* createNode(int value) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    if (newNode == NULL) {
        printf("Error al reservar memoria\n");
        return NULL;
    }
    newNode->val = value;
    newNode->next = NULL;
    return newNode;
}

// Función para imprimir la lista enlazada
void printList(ListNode* head) {
    ListNode* current = head;
    while (current != NULL) {
        printf("%d -> ", current->val);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    // Crear los nodos de la lista
    ListNode* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(3);

    // Imprimir la lista
    printList(head);

    // Liberar la memoria reservada
    ListNode* current = head;
    ListNode* nextNode;
    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }

    return 0;
}
Explicación del Ejemplo
Creación de Nodos:

createNode reserva memoria para un nuevo nodo, asigna el valor y establece el puntero next a NULL.
Construcción de la Lista:

head es el primer nodo.
head->next es el segundo nodo.
head->next->next es el tercer nodo.
Impresión de la Lista:

printList recorre la lista desde head y imprime cada valor seguido de -> hasta llegar al final, donde imprime NULL.
Liberación de Memoria:

Se recorre la lista y se libera la memoria de cada nodo para evitar fugas de memoria.

Representación Gráfica en Memoria
Supongamos que tenemos una lista enlazada con los valores 1, 2 y 3:


head -> [1 | next] -> [2 | next] -> [3 | next] -> NULL
En memoria, se vería algo así (las direcciones son ejemplos):


Memoria:
Dirección    Valor    Siguiente
0x100        1        0x104
0x104        2        0x108
0x108        3        NULL
Gráficamente:


+--------+    +--------+    +--------+
| 1      |    | 2      |    | 3      |
| next-->|    | next-->|    | next-->| NULL
+--------+    +--------+    +--------+
0x100         0x104         0x108

Ventajas y Desventajas de Linked Lists

Ventajas
Inserción y Eliminación: Las operaciones de inserción y eliminación pueden ser más eficientes que en los arrays, especialmente cuando se insertan o eliminan elementos en el medio de la lista.
Tamaño Dinámico: No es necesario declarar el tamaño de la lista con antelación. La lista puede crecer y reducirse dinámicamente según sea necesario.
Memoria No Contigua: Los nodos no necesitan estar en ubicaciones de memoria contiguas, lo que facilita la gestión de la memoria.

Desventajas
Acceso Secuencial: No se puede acceder directamente a un nodo en una posición específica; se debe recorrer la lista desde el principio.
Uso de Memoria Adicional: Cada nodo requiere memoria adicional para el puntero next.
Complejidad de Implementación: Más compleja de implementar y gestionar en comparación con los arrays.

Resumen
Linked Lists: Son estructuras de datos flexibles que permiten inserciones y eliminaciones eficientes.
Singly Linked List: Cada nodo apunta solo al siguiente nodo.
Memoria: Los nodos se almacenan en ubicaciones de memoria no contiguas y contienen punteros a otros nodos.
Operaciones: Crear, insertar, eliminar y recorrer son operaciones comunes con las linked lists.
Entender las linked lists te prepara para trabajar con estructuras de datos más complejas y algoritmos eficientes.